name: Release Lambdas

on:
  push:
    branches:
      - main
    paths:
      - 'lambdas/**'
  workflow_dispatch:

concurrency:
  group: release-lambdas-${{ github.ref }}
  cancel-in-progress: false

jobs:
  discover:
    name: Discover Lambdas to Release
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Discover lambda directories
        id: set-matrix
        run: |
          LAMBDAS="["
          FIRST=true
          
          for lambda_dir in lambdas/*/; do
            if [ -d "$lambda_dir" ] && [ -f "$lambda_dir/pyproject.toml" ]; then
              lambda_name=$(basename "$lambda_dir")
              
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                LAMBDAS="$LAMBDAS,"
              fi
              LAMBDAS="$LAMBDAS{\"name\":\"$lambda_name\",\"path\":\"lambdas/$lambda_name\"}"
            fi
          done
          
          LAMBDAS="$LAMBDAS]"
          echo "matrix=$LAMBDAS" >> $GITHUB_OUTPUT
          echo "Discovered lambdas: $LAMBDAS"

  test:
    name: Test ${{ matrix.lambda.name }}
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: ${{ fromJson(needs.discover.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install UV
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: cd ${{ matrix.lambda.path }} && uv sync --group dev

      - name: Run linter
        run: |
          cd ${{ matrix.lambda.path }}
          uv run ruff check src/ tests/ || true
          uv run ruff format --check src/ tests/ || true

      - name: Run type checker
        run: cd ${{ matrix.lambda.path }} && uv run mypy src/ || true

      - name: Run unit tests
        run: cd ${{ matrix.lambda.path }} && uv run pytest tests/ -v --cov=src --cov-report=term-missing

  release:
    name: Release ${{ matrix.lambda.name }}
    needs: [discover, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        lambda: ${{ fromJson(needs.discover.outputs.matrix) }}
      fail-fast: false
    permissions:
      contents: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install UV
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: cd ${{ matrix.lambda.path }} && uv sync --group dev

      - name: Build distribution
        run: |
          cd ${{ matrix.lambda.path }}
          uv build
          mkdir -p ../../dist/${{ matrix.lambda.name }}
          cp dist/*.whl ../../dist/${{ matrix.lambda.name }}/
          # Create lambda deployment package
          uv export --no-hashes --no-dev > requirements.txt
          mkdir -p package
          pip install -r requirements.txt -t package/
          cp -r src/* package/
          cd package && zip -r ../../../dist/${{ matrix.lambda.name }}/lambda-${{ matrix.lambda.name }}.zip . && cd ..

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          directory: ${{ matrix.lambda.path }}

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.3.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
          directory: ${{ matrix.lambda.path }}

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        if: steps.release.outputs.released == 'true'
        with:
          name: lambda-${{ matrix.lambda.name }}-distribution-artifacts
          path: dist/${{ matrix.lambda.name }}
          if-no-files-found: error

  notify-success:
    name: Notify Lambda Releases Success
    needs: [discover, release]
    runs-on: ubuntu-latest
    if: always() && needs.release.result == 'success'
    steps:
      - name: Release Success Notification
        run: |
          echo "🎉 Lambda release workflow completed!"
          echo "📦 All lambdas processed for potential releases"
          echo "📋 Changelogs updated for released lambdas"
          echo "🏷️ Git tags created for released lambdas"
          echo "📁 Distribution artifacts uploaded for released lambdas"

  notify-failure:
    name: Notify Lambda Release Failure
    needs: [test, release]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Release Failure Notification
        run: |
          echo "❌ Lambda release workflow failed!"
          echo "🔍 Please check the workflow logs for details"
          echo "🛠️ Fix any issues and push again to retry"