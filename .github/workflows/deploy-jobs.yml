name: Deploy Glue Jobs (Production)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      version_tag:
        description: 'GitHub release version tag to deploy (e.g., v1.2.3 or glue-v1.2.3)'
        required: true
        type: string
      # Note: Always deploys from GitHub releases for consistency and traceability

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install UV
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: cd glue-jobs && uv sync --group dev
      
      - name: Run linter
        run: make lint
      
      - name: Run unit tests
        run: make test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set deployment parameters
        id: env
        run: |
          # Use user-specified environment
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          
          # Version tag is required - no fallback to "latest"
          VERSION_TAG="${{ inputs.version_tag }}"
          if [ -z "$VERSION_TAG" ]; then
            echo "‚ùå Error: version_tag is required for deployments"
            exit 1
          fi
          
          # Remove glue-v prefix if present (for S3 paths)
          CLEAN_VERSION="${VERSION_TAG#glue-v}"
          echo "version_tag=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "prefix=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          
          # Extract semantic version for wheel filename (v1.2.3 -> 1.2.3)
          WHEEL_VERSION="${CLEAN_VERSION#v}"
          echo "wheel_version=$WHEEL_VERSION" >> $GITHUB_OUTPUT
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Download artifacts from GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist
          RELEASE_TAG="${{ inputs.version_tag }}"
          # Add glue-v prefix if not present for release downloads
          if [[ ! "$RELEASE_TAG" == glue-v* ]]; then
            RELEASE_TAG="glue-v$RELEASE_TAG"
          fi
          echo "üì¶ Downloading artifacts from GitHub release: $RELEASE_TAG"
          gh release download "$RELEASE_TAG" --pattern "*.whl" --pattern "requirements.txt" --dir dist/
          
          # Verify artifacts were downloaded
          if ! ls dist/*.whl 1> /dev/null 2>&1; then
            echo "‚ùå Error: No wheel files found in release $RELEASE_TAG"
            echo "Make sure the release exists and contains the required artifacts"
            exit 1
          fi
          
          if [ ! -f "dist/requirements.txt" ]; then
            echo "‚ùå Error: requirements.txt not found in release $RELEASE_TAG"
            exit 1
          fi
          
          echo "‚úÖ Successfully downloaded release artifacts"
          
      - name: Detect wheel version
        id: wheel
        run: |
          # Get the actual wheel version from the built/downloaded wheel file
          if ls dist/*.whl 1> /dev/null 2>&1; then
            ACTUAL_WHEEL_VERSION=$(ls dist/*.whl | sed -n 's/.*aws_glue_etl_example-\([0-9]\+\.[0-9]\+\.[0-9]\+\)-.*/\1/p' | head -1)
            echo "detected_version=$ACTUAL_WHEEL_VERSION" >> $GITHUB_OUTPUT
            echo "üì¶ Detected wheel version: $ACTUAL_WHEEL_VERSION"
            
            # Verify it matches our expected version
            EXPECTED_VERSION="${{ steps.env.outputs.wheel_version }}"
            if [ "$ACTUAL_WHEEL_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "‚ö†Ô∏è  Warning: Detected wheel version ($ACTUAL_WHEEL_VERSION) differs from expected version ($EXPECTED_VERSION)"
              echo "Using detected version for deployment"
            fi
          else
            echo "‚ùå Error: No wheel file found in dist/"
            exit 1
          fi
      
      - name: Deploy to S3
        run: |
          # Upload wheel file for dependencies
          aws s3 cp dist/*.whl s3://glue-scripts-${{ steps.env.outputs.environment }}/dependencies/${{ steps.env.outputs.prefix }}/
          
          # Upload requirements.txt for external dependencies
          aws s3 cp dist/requirements.txt s3://glue-scripts-${{ steps.env.outputs.environment }}/dependencies/${{ steps.env.outputs.prefix }}/requirements.txt
          
          # Upload job scripts
          aws s3 cp glue-jobs/src/jobs/ s3://glue-scripts-${{ steps.env.outputs.environment }}/scripts/${{ steps.env.outputs.prefix }}/ \
            --recursive --exclude "*.pyc" --exclude "__pycache__"
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Deploy Infrastructure
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: |
          # Initialize Terraform
          terraform init
          
          # Plan with specific version variables
          terraform plan \
            -var="glue_jobs_version=${{ steps.env.outputs.version_tag }}" \
            -var="glue_wheel_version=${{ steps.wheel.outputs.detected_version }}" \
            -out=tfplan
          
          # Apply the changes
          terraform apply -auto-approve tfplan
          
          echo "‚úÖ Infrastructure updated with version: ${{ steps.env.outputs.version_tag }}"
          echo "üêç Wheel version: ${{ steps.wheel.outputs.detected_version }}"
      
      - name: Deployment Summary
        run: |
          echo "üöÄ Glue jobs deployed successfully!"
          echo "üìç Environment: ${{ steps.env.outputs.environment }}"
          echo "üè∑Ô∏è  Deployment Version: ${{ steps.env.outputs.version_tag }}"
          echo "üêç Wheel Version: ${{ steps.wheel.outputs.detected_version }}"
          echo ""
          echo "üì¶ Deployed Locations:"
          echo "  Scripts: s3://glue-scripts-${{ steps.env.outputs.environment }}/scripts/${{ steps.env.outputs.prefix }}/"
          echo "  Dependencies: s3://glue-scripts-${{ steps.env.outputs.environment }}/dependencies/${{ steps.env.outputs.prefix }}/"
          echo "  Requirements: s3://glue-scripts-${{ steps.env.outputs.environment }}/dependencies/${{ steps.env.outputs.prefix }}/requirements.txt"
          echo ""
          echo "üèóÔ∏è  Infrastructure:"
          echo "  Glue jobs updated with version-specific dependencies"
          echo "  Jobs configured to use: aws_glue_etl_example-${{ steps.wheel.outputs.detected_version }}-py3-none-any.whl"
          echo ""
          echo "‚úÖ Deployed from GitHub release: ${{ inputs.version_tag }}"
          echo "üîí Production deployment using verified release artifacts"