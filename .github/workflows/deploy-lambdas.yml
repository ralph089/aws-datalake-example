name: Deploy Lambda Functions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      lambda_name:
        description: 'Lambda to deploy (leave empty for all)'
        required: false
        type: string
      version_tag:
        description: 'Version tag to deploy (defaults to latest)'
        required: false
        type: string
        default: 'latest'

jobs:
  discover-lambdas:
    runs-on: ubuntu-latest
    outputs:
      lambdas: ${{ steps.set-matrix.outputs.lambdas }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Determine lambdas to deploy
        id: set-matrix
        run: |
          if [ -n "${{ inputs.lambda_name }}" ]; then
            # Deploy specific lambda
            echo "lambdas=[{\"name\":\"${{ inputs.lambda_name }}\",\"path\":\"lambdas/${{ inputs.lambda_name }}\"}]" >> $GITHUB_OUTPUT
          else
            # Deploy all lambdas
            LAMBDAS="["
            FIRST=true
            
            for lambda_dir in lambdas/*/; do
              if [ -d "$lambda_dir" ]; then
                lambda_name=$(basename "$lambda_dir")
                
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  LAMBDAS="$LAMBDAS,"
                fi
                LAMBDAS="$LAMBDAS{\"name\":\"$lambda_name\",\"path\":\"lambdas/$lambda_name\"}"
              fi
            done
            
            LAMBDAS="$LAMBDAS]"
            echo "lambdas=$LAMBDAS" >> $GITHUB_OUTPUT
          fi

  deploy-lambdas:
    needs: discover-lambdas
    strategy:
      matrix:
        lambda: ${{ fromJson(needs.discover-lambdas.outputs.lambdas) }}
      fail-fast: false
    uses: ./.github/workflows/lambda-deploy-reusable.yml
    with:
      lambda_name: ${{ matrix.lambda.name }}
      lambda_path: ${{ matrix.lambda.path }}
      environment: ${{ inputs.environment }}
      python_version: '3.13'
      aws_region: 'eu-west-1'
      s3_bucket: 'lambda-artifacts-${{ inputs.environment }}'
      version_tag: ${{ inputs.version_tag || 'latest' }}
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      LAMBDA_EXECUTION_ROLE_ARN: ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }}