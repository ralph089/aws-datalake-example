[project]
name = "data-lake-to-api-lambda"
version = "1.0.0"  # This version is managed by semantic-release
description = "Lambda function to read from AWS Data Lake and send to REST API"
authors = [
    {name = "Data Engineering Team"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # AWS SDK
    "boto3>=1.28.0",
    # HTTP & API
    "httpx>=0.25.0",
    "tenacity>=8.0.0",
    # Configuration & Validation
    "pydantic>=2.0.0",
    # Data processing
    "pyarrow>=14.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "package",
    "site-packages",
    "venv",
]

# Assume Python 3.11
target-version = "py311"
line-length = 120

[tool.ruff.lint]
# See https://beta.ruff.rs/docs/rules/ for a full list of supported rules.
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
pythonpath = ["src"]
addopts = "--cov=src --cov-report=term-missing --cov-report=html"
markers = [
    "unit: mark test as a unit test",
    "integration: mark test as an integration test",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "moto>=4.2.0",
    "python-semantic-release>=8.0.0",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.semantic_release]
# Version source and management
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "src/config.py:__version__",
]

# Git settings
branch = "main"
commit_message = "chore(lambda): v{version}"
commit_author = "semantic-release <noreply@semantic-release.org>"

# Build and upload
build_command = """
    uv lock --upgrade-package data-lake-to-api-lambda
    git add uv.lock
    uv build
"""
upload_to_vcs_release = true

# Tag settings
tag_format = "lambda-data-lake-to-api-v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "build"]

[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = []

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"